// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.598
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"reflect"
	"strings"
)

//This builds a form for any type of object based on two struct tags 'form' and 'label'
//form is the type (eg. text, hidden, number... etc.)
//label is the visual discriptor
func GetFormAsString(item any) (string, error) {
	name := strings.ToLower(reflect.TypeOf(item).Elem().Name())
	val := reflect.ValueOf(item).Elem()

	var result strings.Builder
	result.WriteString(fmt.Sprintf(`<form hx-put="/%s/update" hx-swap="outerHTML" target="#top-right">`, name))
	result.WriteString(fmt.Sprintf(`<div class="title">%s</div>`, name))
	var id string
	for i := 0; i < val.NumField(); i++ {
		valueField := val.Field(i)
		typeField := val.Type().Field(i)

		inputType := typeField.Tag.Get("form")
		label := typeField.Tag.Get("label")
		//tags := strings.Split(tag, ",") for multiple tags you could loop over the after splitting
		if strings.ToLower(typeField.Name) == "id" {
			id = valueField.String()
		}
		switch inputType {
		case "omit":
			continue
		case "text":
			result.WriteString(fmt.Sprintf(`<div class="row"><label>%s</label><input type="text" name="%s" placeholder="%s" value="%s"/></div>`, label, typeField.Name, label, valueField))
		case "hidden":
			result.WriteString(fmt.Sprintf(`<input type="hidden" name="%s" value="%s"/>`, typeField.Name, valueField))
		case "number":
			result.WriteString(fmt.Sprintf(`<div class="row"><label>%s</label><input type="number" name="%s" placeholder="%s" value="%d"/></div>`, label, typeField.Name, label, valueField))
		}
	}
	result.WriteString(fmt.Sprintf(`<div class="row">
    <button class="button is-primary" type="submit">save</button>
    <button class="button is-danger" hx-delete="/%s/%s" hx-swap="innerHTML" hx-target="#bot-right">delete</button></div>`, name, id))
	result.WriteString("</form>")
	fmt.Println(name, " : ", result.String())
	return result.String(), nil
}

func CreateForm(item any) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.Raw(GetFormAsString(item)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

/*
func Reflect[T any](o T){

}*/
